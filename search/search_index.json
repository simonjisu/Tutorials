{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Space for Tutorials and Recording \ud83d\ude43 \uacf5\ubd80\ud560\uac8c \ub108\ubb34 \ub9ce\ub2e4. TAGS \u00b6 TIL \u00b6 08.28 Disjoint Set and Union-find 08.29 Steiner Tree Problem \uc218\ud559\uc801 \ucd5c\uc801\ud654 \u00b6 Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38 Chapter - 2 \uc120\ud615 \uacc4\ud68d","title":"Welcome"},{"location":"#tags","text":"","title":"TAGS"},{"location":"#til","text":"08.28 Disjoint Set and Union-find 08.29 Steiner Tree Problem","title":"TIL"},{"location":"#_1","text":"Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38 Chapter - 2 \uc120\ud615 \uacc4\ud68d","title":"\uc218\ud559\uc801 \ucd5c\uc801\ud654"},{"location":"SUMMARY/","text":"Welcome TIL 2022 \uc218\ud559\uc801 \ucd5c\uc801\ud654 Chapter 1 Chapter 2 GraphQL","title":"SUMMARY"},{"location":"graphql/","text":"\uc6f9 \uc571 API \uac1c\ubc1c\uc744 \uc704\ud55c GraphQL Study \u00b6 \ub3c4\uc11c\ucd9c\ud310 \uc778\uc0ac\uc774\ud2b8\uc5d0\uc11c \ucd9c\ud310\ud55c <\uc6f9 \uc571 API \uac1c\ubc1c\uc744 \uc704\ud55c GraphQL> \ucc45\uc744 \ubcf4\uace0 \uacf5\ubd80\ud558\uace0 \uc815\ub9ac\ud558\ub294 \uc911\uc785\ub2c8\ub2e4. \uae30\ubcf8 \uc6a9\uc5b4\ub098 \ubc30\uacbd \uc9c0\uc2dd\uc740 \uc815\ub9ac\ud558\uc9c0 \uc54a\uace0 \uc2e4\uc2b5 \uad00\ub828 \ub0b4\uc6a9\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. Table of Contents \u00b6 Date Docs 2022.","title":"GraphQL"},{"location":"graphql/#api-graphql-study","text":"\ub3c4\uc11c\ucd9c\ud310 \uc778\uc0ac\uc774\ud2b8\uc5d0\uc11c \ucd9c\ud310\ud55c <\uc6f9 \uc571 API \uac1c\ubc1c\uc744 \uc704\ud55c GraphQL> \ucc45\uc744 \ubcf4\uace0 \uacf5\ubd80\ud558\uace0 \uc815\ub9ac\ud558\ub294 \uc911\uc785\ub2c8\ub2e4. \uae30\ubcf8 \uc6a9\uc5b4\ub098 \ubc30\uacbd \uc9c0\uc2dd\uc740 \uc815\ub9ac\ud558\uc9c0 \uc54a\uace0 \uc2e4\uc2b5 \uad00\ub828 \ub0b4\uc6a9\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.","title":"\uc6f9 \uc571 API \uac1c\ubc1c\uc744 \uc704\ud55c GraphQL Study"},{"location":"graphql/#table-of-contents","text":"Date Docs 2022.","title":"Table of Contents"},{"location":"mathoptim/","text":"\uc81c\ub300\ub85c \ubc30\uc6b0\ub294 \uc218\ud559\uc801 \ucd5c\uc801\ud654 Study \u00b6 \ud55c\ube5b \ubbf8\ub514\uc5b4\uc5d0\uc11c \ucd9c\ud310\ud55c <\uc81c\ub300\ub85c \ubc30\uc6b0\ub294 \uc218\ud559\uc801 \ucd5c\uc801\ud654> \ucc45\uc744 \ubcf4\uace0 \uacf5\ubd80\ud558\uace0 \uc815\ub9ac\ud558\ub294 \uc911\uc785\ub2c8\ub2e4. Table of Contents \u00b6 Date Docs 2022.08.04 Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38","title":"\uc218\ud559\uc801 \ucd5c\uc801\ud654"},{"location":"mathoptim/#study","text":"\ud55c\ube5b \ubbf8\ub514\uc5b4\uc5d0\uc11c \ucd9c\ud310\ud55c <\uc81c\ub300\ub85c \ubc30\uc6b0\ub294 \uc218\ud559\uc801 \ucd5c\uc801\ud654> \ucc45\uc744 \ubcf4\uace0 \uacf5\ubd80\ud558\uace0 \uc815\ub9ac\ud558\ub294 \uc911\uc785\ub2c8\ub2e4.","title":"\uc81c\ub300\ub85c \ubc30\uc6b0\ub294 \uc218\ud559\uc801 \ucd5c\uc801\ud654 Study"},{"location":"mathoptim/#table-of-contents","text":"Date Docs 2022.08.04 Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38","title":"Table of Contents"},{"location":"mathoptim/chapter1/","tags":["\uc218\ud559\uc801 \ucd5c\uc801\ud654"],"text":"\uc218\ud559\uc801 \ucd5c\uc801\ud654\ub780? \u00b6 \uc81c\uc57d \uc870\uac74\ud558\uc5d0\uc11c \ubaa9\uc801 \ud568\uc22b\uac12\uc744 \ucd5c\uc18c(\ub610\ub294 \ucd5c\ub300)\ub85c \ud558\ub294 \uc194\ub8e8\uc158\uc744 \uad6c\ud558\ub294 \ubb38\uc81c \"\uc0c1\uc218\", \"\ubcc0\uc218\", \"\uc81c\uc57d \uc870\uac74\", \"\ubaa9\uc801 \ud568\uc218\"\ub85c \uc774\ub8e8\uc5b4\uc9d0 \ucd5c\uc801\ud654 \ubb38\uc81c \u00b6 \ub2e4\uc74c\uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc74c \\[ \\begin{aligned} \\arg \\min & f(x) \\\\ \\text{s.t. } &x \\in S \\end{aligned}\\] \\(x\\) \ub294 \ubcc0\uc218(variable) \ud639\uc740 \uacb0\uc815 \ubcc0\uc218(decision variable) \uc194\ub8e8\uc158(solution)\uc740 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ub41c \uac12, \uc870\uac74\uc5d0 \ub9cc\uc871\ud558\ub294 \ucd5c\uc801\uc758 \uc194\ub8e8\uc158\uc740 \\(x^{*} \\in S\\) \ub85c \ud45c\ud604, \uc774\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12 \\(f(x^{*})\\) \uc744 \ucd5c\uc801\uac12\uc774\ub77c\uace0 \ud568 \uc81c\uc57d\uc870\uac74(consstraint)\uc744 \ub9cc\uc871\ud558\ub294 \uc194\ub8e8\uc158\uc744 \uc2e4\ud589\uac00\ub2a5 \uc194\ub8e8\uc158(feasible solution), \uadf8 \uc9d1\ud569 \\(S\\) \ub97c \uc2e4\ud589 \uac00\ub2a5 \uc601\uc5ed(feasible region) \\(f\\) \ub294 \ubaa9\uc801 \ud568\uc218(objective function) \ubc18\ub4dc\uc2dc \ucd5c\uc801\uc758 \uc194\ub8e8\uc158\uc774 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc73c\uba70 \ub2e4\uc74c\uacfc \uac19\uc774 \ub124 \uac00\uc9c0\ub85c \ubd84\ub958 \uac00\ub2a5 \uc2e4\ud589 \ubd88\ub2a5(infeasible) : \uc81c\uc57d\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc989, \uc2e4\ud589 \uac00\ub2a5 \uc601\uc5ed(feasible region)\uc774 \uacf5\uc9d1\ud569 \\(S \\neq \\emptyset\\) \ud55c\uacc4\uac00 \uc5c6\uc74c(unbounded) : \ubaa9\uc801 \ud568\uc22b\uac12\uc744 \ud55c\uc5c6\uc774 \uac1c\uc120\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc720\ud55c\ud558\uc9c0\ub9cc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc5c6\uc74c : \ubaa9\uc801 \ud568\uc22b\uac12\uc740 \uc720\ud55c\ud558\uc9c0\ub9cc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud55c\uc9c0 \uc54a\ub294\ub2e4. \ucd5c\uc801 \uc194\ub8e8\uc158\uc774 \uc874\uc7ac : \uc720\ud55c\ud55c \ucd5c\uc801\uac12\uacfc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud55c\ub2e4. \ub300\ud45c\uc801\uc778 \ucd5c\uc801\ud654 \ubb38\uc81c \u00b6 flowchart LR; A[\uc5f0\uc18d \ucd5c\uc801\ud654 \ubb38\uc81c]:::clsA --- A1[\uc120\ud615 \uacc4\ud68d \ubb38\uc81c]:::clsA --> A1.1[\ub2e8\uccb4\ubc95]:::clsA; A --- A2[\ubcfc\ub85d 2\ucc28 \uacc4\ud68d \ubb38\uc81c]:::clsA --> A2.1[\uc720\ud6a8 \uc81c\uc57d\ubc95]:::clsA; A --- A3[\uc81c\uc57d\uc774 \uc5c6\ub294 \ube44\uc120\ud615 \uac8c\ud68d \ubb38\uc81c]:::clsA --> A3.1[\uacbd\uc0ac \ud558\uac15\ubc95, \ub274\ud134\ubc95, \uc900 \ub274\ud134\ubc95]:::clsA; A --- A4[\uc81c\uc57d\uc774 \uc788\ub294 \ube44\uc120\ud615 \uac8c\ud68d \ubb38\uc81c]:::clsA --> A4.1[\ud328\ub110\ud2f0 \ud568\uc218\ubc95, \ud655\uc7a5 \ub77c\uadf8\ub791\uc8fc \ud568\uc218\ubc95,<br/> \ub0b4\uc810\ubc95, \uc21c\ucc28 2\ucc28 \uacc4\ud68d\ubc95]:::clsA; classDef clsA fill:#ffe657; B[\"\uc774\uc0b0 \ucd5c\uc801\ud654 \ubb38\uc81c (\uc870\ud569 \ucd5c\uc801\ud654 \ubb38\uc81c)\"]:::clsB --- B1[\uc790\uc6d0 \ubc30\ubd84 \ubb38\uc81c, <br/>\ucd5c\uc18c \uc804\uc5ed \ud2b8\ub9ac \ubb38\uc81c \ub4f1]:::clsB --> B1.1[\ud0d0\uc695 \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B2[\uc790\uc6d0 \ubc30\ubd84 \ubb38\uc81c, \ub0c5\uc0c9 \ubb38\uc81c, <br/>\ucd5c\uc18c \ube44\uc6a9 \ud0c4\uc131 \ub9e4\uce6d \ubb38\uc81c \ub4f1]:::clsB --> B2.1[\ub3d9\uc801 \uacc4\ud68d\ubc95]:::clsB; B --- B3[\ucd5c\ub2e8 \uacbd\ub85c \ubb38\uc81c]:::clsB --> B3.1[\ub2e4\uc774\ud06c\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998, <br/>\ubca8\uba3c-\ud3ec\ub4dc \uc54c\uace0\ub9ac\uc998, <br/>\ud50c\ub85c\uc774\ub4dc-\uc6cc\uc15c \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B4[\ucd5c\ub300 \ud750\ub984 \ubb38\uc81c, \ucd5c\uc18c \ube44\uc6a9\ud654 \ubb38\uc81c, <br/>\ucd5c\ub300 \ub9e4\uce6d \ubb38\uc81c, \ud560\ub2f9 \ubb38\uc81c \ub4f1]:::clsB --> B4.1[\uc99d\uac00 \uacbd\ub85c\ubc95, <br/>\uc74c\uc758 \ub2eb\ud78c \uacbd\ub85c \uc18c\uac70\ubc95, <br/>\ucd5c\ub2e8 \uacbd\ub85c \ubc18\ubcf5\ubc95]:::clsB; B --- B5[\uc815\uc218 \uacc4\ud68d \ubb38\uc81c]:::clsB --> B5.1[\ubd84\uae30 \ud55c\uc815\ubc95, \uc808\uc81c \ud3c9\uba74\ubc95]:::clsB; B --- B6[\ube48 \ud328\ud0b9 \ubb38\uc81c, \ucd5c\ub300 \ucef7 \ubb38\uc81c, \uc678\ud310\uc6d0 \ubb38\uc81c, <br/>\uaf2d\uc9d3\uc810 \ucee4\ubc84 \ubb38\uc81c, \ub0c5\uc0c9 \ubb38\uc81c \ub4f1]:::clsB --> B6.1[\uc131\ub2a5 \ubcf4\uc99d \uadfc\uc0ac \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B7[\ub2e4\uc591\ud55c NP \ub09c\ud574\ud55c \ubb38\uc81c]:::clsB --> B7.1[\uad6d\uc18c \ud0d0\uc0c9 \uc54c\uace0\ub9ac\uc998, \uba54\ud0c0 \ud734\ub9ac\uc2a4\ud2f1]:::clsB; classDef clsB fill:#8dc472;","title":"Chapter 1"},{"location":"mathoptim/chapter1/#_1","text":"\uc81c\uc57d \uc870\uac74\ud558\uc5d0\uc11c \ubaa9\uc801 \ud568\uc22b\uac12\uc744 \ucd5c\uc18c(\ub610\ub294 \ucd5c\ub300)\ub85c \ud558\ub294 \uc194\ub8e8\uc158\uc744 \uad6c\ud558\ub294 \ubb38\uc81c \"\uc0c1\uc218\", \"\ubcc0\uc218\", \"\uc81c\uc57d \uc870\uac74\", \"\ubaa9\uc801 \ud568\uc218\"\ub85c \uc774\ub8e8\uc5b4\uc9d0","title":"\uc218\ud559\uc801 \ucd5c\uc801\ud654\ub780?"},{"location":"mathoptim/chapter1/#_2","text":"\ub2e4\uc74c\uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc74c \\[ \\begin{aligned} \\arg \\min & f(x) \\\\ \\text{s.t. } &x \\in S \\end{aligned}\\] \\(x\\) \ub294 \ubcc0\uc218(variable) \ud639\uc740 \uacb0\uc815 \ubcc0\uc218(decision variable) \uc194\ub8e8\uc158(solution)\uc740 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ub41c \uac12, \uc870\uac74\uc5d0 \ub9cc\uc871\ud558\ub294 \ucd5c\uc801\uc758 \uc194\ub8e8\uc158\uc740 \\(x^{*} \\in S\\) \ub85c \ud45c\ud604, \uc774\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12 \\(f(x^{*})\\) \uc744 \ucd5c\uc801\uac12\uc774\ub77c\uace0 \ud568 \uc81c\uc57d\uc870\uac74(consstraint)\uc744 \ub9cc\uc871\ud558\ub294 \uc194\ub8e8\uc158\uc744 \uc2e4\ud589\uac00\ub2a5 \uc194\ub8e8\uc158(feasible solution), \uadf8 \uc9d1\ud569 \\(S\\) \ub97c \uc2e4\ud589 \uac00\ub2a5 \uc601\uc5ed(feasible region) \\(f\\) \ub294 \ubaa9\uc801 \ud568\uc218(objective function) \ubc18\ub4dc\uc2dc \ucd5c\uc801\uc758 \uc194\ub8e8\uc158\uc774 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc73c\uba70 \ub2e4\uc74c\uacfc \uac19\uc774 \ub124 \uac00\uc9c0\ub85c \ubd84\ub958 \uac00\ub2a5 \uc2e4\ud589 \ubd88\ub2a5(infeasible) : \uc81c\uc57d\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc989, \uc2e4\ud589 \uac00\ub2a5 \uc601\uc5ed(feasible region)\uc774 \uacf5\uc9d1\ud569 \\(S \\neq \\emptyset\\) \ud55c\uacc4\uac00 \uc5c6\uc74c(unbounded) : \ubaa9\uc801 \ud568\uc22b\uac12\uc744 \ud55c\uc5c6\uc774 \uac1c\uc120\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc720\ud55c\ud558\uc9c0\ub9cc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc5c6\uc74c : \ubaa9\uc801 \ud568\uc22b\uac12\uc740 \uc720\ud55c\ud558\uc9c0\ub9cc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud55c\uc9c0 \uc54a\ub294\ub2e4. \ucd5c\uc801 \uc194\ub8e8\uc158\uc774 \uc874\uc7ac : \uc720\ud55c\ud55c \ucd5c\uc801\uac12\uacfc \ucd5c\uc801 \uc194\ub958\uc158\uc774 \uc874\uc7ac\ud55c\ub2e4.","title":"\ucd5c\uc801\ud654 \ubb38\uc81c"},{"location":"mathoptim/chapter1/#_3","text":"flowchart LR; A[\uc5f0\uc18d \ucd5c\uc801\ud654 \ubb38\uc81c]:::clsA --- A1[\uc120\ud615 \uacc4\ud68d \ubb38\uc81c]:::clsA --> A1.1[\ub2e8\uccb4\ubc95]:::clsA; A --- A2[\ubcfc\ub85d 2\ucc28 \uacc4\ud68d \ubb38\uc81c]:::clsA --> A2.1[\uc720\ud6a8 \uc81c\uc57d\ubc95]:::clsA; A --- A3[\uc81c\uc57d\uc774 \uc5c6\ub294 \ube44\uc120\ud615 \uac8c\ud68d \ubb38\uc81c]:::clsA --> A3.1[\uacbd\uc0ac \ud558\uac15\ubc95, \ub274\ud134\ubc95, \uc900 \ub274\ud134\ubc95]:::clsA; A --- A4[\uc81c\uc57d\uc774 \uc788\ub294 \ube44\uc120\ud615 \uac8c\ud68d \ubb38\uc81c]:::clsA --> A4.1[\ud328\ub110\ud2f0 \ud568\uc218\ubc95, \ud655\uc7a5 \ub77c\uadf8\ub791\uc8fc \ud568\uc218\ubc95,<br/> \ub0b4\uc810\ubc95, \uc21c\ucc28 2\ucc28 \uacc4\ud68d\ubc95]:::clsA; classDef clsA fill:#ffe657; B[\"\uc774\uc0b0 \ucd5c\uc801\ud654 \ubb38\uc81c (\uc870\ud569 \ucd5c\uc801\ud654 \ubb38\uc81c)\"]:::clsB --- B1[\uc790\uc6d0 \ubc30\ubd84 \ubb38\uc81c, <br/>\ucd5c\uc18c \uc804\uc5ed \ud2b8\ub9ac \ubb38\uc81c \ub4f1]:::clsB --> B1.1[\ud0d0\uc695 \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B2[\uc790\uc6d0 \ubc30\ubd84 \ubb38\uc81c, \ub0c5\uc0c9 \ubb38\uc81c, <br/>\ucd5c\uc18c \ube44\uc6a9 \ud0c4\uc131 \ub9e4\uce6d \ubb38\uc81c \ub4f1]:::clsB --> B2.1[\ub3d9\uc801 \uacc4\ud68d\ubc95]:::clsB; B --- B3[\ucd5c\ub2e8 \uacbd\ub85c \ubb38\uc81c]:::clsB --> B3.1[\ub2e4\uc774\ud06c\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998, <br/>\ubca8\uba3c-\ud3ec\ub4dc \uc54c\uace0\ub9ac\uc998, <br/>\ud50c\ub85c\uc774\ub4dc-\uc6cc\uc15c \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B4[\ucd5c\ub300 \ud750\ub984 \ubb38\uc81c, \ucd5c\uc18c \ube44\uc6a9\ud654 \ubb38\uc81c, <br/>\ucd5c\ub300 \ub9e4\uce6d \ubb38\uc81c, \ud560\ub2f9 \ubb38\uc81c \ub4f1]:::clsB --> B4.1[\uc99d\uac00 \uacbd\ub85c\ubc95, <br/>\uc74c\uc758 \ub2eb\ud78c \uacbd\ub85c \uc18c\uac70\ubc95, <br/>\ucd5c\ub2e8 \uacbd\ub85c \ubc18\ubcf5\ubc95]:::clsB; B --- B5[\uc815\uc218 \uacc4\ud68d \ubb38\uc81c]:::clsB --> B5.1[\ubd84\uae30 \ud55c\uc815\ubc95, \uc808\uc81c \ud3c9\uba74\ubc95]:::clsB; B --- B6[\ube48 \ud328\ud0b9 \ubb38\uc81c, \ucd5c\ub300 \ucef7 \ubb38\uc81c, \uc678\ud310\uc6d0 \ubb38\uc81c, <br/>\uaf2d\uc9d3\uc810 \ucee4\ubc84 \ubb38\uc81c, \ub0c5\uc0c9 \ubb38\uc81c \ub4f1]:::clsB --> B6.1[\uc131\ub2a5 \ubcf4\uc99d \uadfc\uc0ac \uc54c\uace0\ub9ac\uc998]:::clsB; B --- B7[\ub2e4\uc591\ud55c NP \ub09c\ud574\ud55c \ubb38\uc81c]:::clsB --> B7.1[\uad6d\uc18c \ud0d0\uc0c9 \uc54c\uace0\ub9ac\uc998, \uba54\ud0c0 \ud734\ub9ac\uc2a4\ud2f1]:::clsB; classDef clsB fill:#8dc472;","title":"\ub300\ud45c\uc801\uc778 \ucd5c\uc801\ud654 \ubb38\uc81c"},{"location":"mathoptim/chapter2/","tags":["\uc218\ud559\uc801 \ucd5c\uc801\ud654"],"text":"1. \uc120\ud615 \uacc4\ud68d \ubb38\uc81c \u00b6 \\[ \\begin{aligned} \\arg \\min\\ & c^Tx \\\\ \\text{s.t. } & Ax^T \\geq b, \\\\ & x \\geq 0 \\end{aligned}\\] where \\[\\begin{aligned} \\mathbf{A} &= \\begin{bmatrix} a_{11} & \\cdots & a_{1n} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{m_1} & \\cdots & a_{mn} \\end{bmatrix} \\in \\Bbb{R}^{m \\times n} \\end{aligned}\\] \\[\\begin{aligned} \\mathbf{b} &= \\begin{bmatrix} b_{1} \\\\ \\vdots \\\\ b_m \\end{bmatrix} \\in \\Bbb{R}^m, \\mathbf{c} = \\begin{bmatrix} c_{1} \\\\ \\vdots \\\\ c_n \\end{bmatrix} \\in \\Bbb{R}^n , \\mathbf{x} = \\begin{bmatrix} x_{1} \\\\ \\vdots \\\\ x_n \\end{bmatrix} \\in \\Bbb{R}^n \\end{aligned}\\] \uc6b4\uc1a1 \uacc4\ud68d \ubb38\uc81c \u00b6 \uc81c\ud488\uc744 m\uac1c \uacf5\uc7a5\uc5d0\uc11c n\uac1c \uace0\uac1d\uc5d0\uac8c \ub0a9\uc785\ud574\uc57c \ud568. \uac01 \uacf5\uc7a5\uc758 \uc0dd\uc0b0\ub7c9\uc744 \ub118\uc9c0 \uc54a\ub294 \ubc94\uc704\uc5d0\uc11c \uace0\uac1d\uc758 \uc218\uc694\ub97c \ub9cc\uc871\uc2dc\ud0a4\ub3c4\ub85d \uc81c\ud488\uc744 \uc6b4\uc1a1\ud558\uace0\uc790 \ud568. \uc774\ub54c \uc6b4\uc1a1\ube44 \ud568\uac8c\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574\uc11c \uc5b4\ub290 \uacf5\uc7a5\uc5d0\uc11c \uc5b4\ub290 \uace0\uac1d\uc5d0\uac70 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc591\uc758 \uc81c\ud488\uc744 \uc6b4\uc1a1\ud558\ub294 \uac83\uc774 \uc88b\uc740\uac00? \uacf5\uc7a5 \\(i\\) \uc758 \uc0dd\uc0b0\ub7c9 \uc0c1\ud55c\uc744 \\(a_i\\) , \uace0\uac1d \\(j\\) \uc758 \uc218\uc694\ub7c9\uc744 \\(b_j\\) , \uacf5\uc7a5 \\(i\\) \uc5d0\uc11c \uace0\uac1d \\(j\\) \ub85c\uc758 \ub2e8\uc704\ub7c9\ub2f9 \uc6b4\uc1a1\ube44\ub97c \\(c_{ij}\\) , \uc6b4\uc1a1\ub7c9\uc744 \\(x_{ij}\\) \ub77c\uace0 \ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubb38\uc81c\ub97c \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc6b4\uc1a1 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{i=1}^m \\sum_{j=1}^n c_{ij}x_{ij}\\] \\[\\begin{aligned}\\text{s.t. } & \\sum_{i=1}^n x_{ij} \\leq a_i, \\quad \\sum_{i=1}^m x_{ij} = b_i, \\quad x_{ij} \\geq 0 \\\\ & i = 1, \\dots, m, \\quad j = 1, \\dots, n \\end{aligned}\\] \uc77c\uc815 \uacc4\ud68d \ubb38\uc81c \u00b6 \\(n\\) \uac1c\uc758 \uc791\uc5c5\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c0\ub294 \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\uace0, \uc55e\uc5d0\uc11c \uc9c4\ud589\ub41c \uc791\uc5c5\uc774 \ubaa8\ub450 \uc644\ub8cc\ub418\uc5b4\uc57c \ub2e4\uc74c \uc791\uc5c5 \uc9c4\ud589 \uac00\ub2a5\ud558\ub2e4. \uac01 \uc791\uc5c5\uc740 \uae30\ubcf8 \ucc98\ub9ac \ube44\uc6a9\uc774 \ub4e4\uba70, \uc5b4\ub290 \uc815\ub3c4 \ube44\uc6a9\uc744 \ucd94\uac00\ud574 \uc5b4\ub290 \uc815\ub3c4\uae4c\uc9c0 \ub0a0\uc9dc\ub97c \ub2e8\ucd95 \ud560 \uc218 \uc788\ub2e4. \uc804\uccb4 \\(T\\) \uc77c \uc774\ub0b4\uc5d0 \uc644\ub8cc\ud574\uc57c\ud558\ub294 \uc870\uac74\uc73c\ub85c \ube44\uc6a9 \ud569\uacc4\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574\uc11c \uac01 \uc791\uc5c5\uc758 \uc2dc\uc791\uc77c\uacfc \ucc98\ub9ac \uc77c\uc218\ub97c \uc5b4\ub5bb\uac8c \uc815\ud574\uc57c \ud560\uae4c? flowchart LR; A[Start]:::clsA --> B1((1)):::clsB --> B2((2)):::clsB B2 --> B3((3)):::clsB --> B5((5)):::clsB --> B7((7)):::clsB B2 --> B4((4)):::clsB --> B6((6)):::clsB --> B7 B4 --> B5 B7 --> A2[End]:::clsA classDef clsA fill:#f5c414; classDef clsB fill:#669dfa; \\(i\\) \ubc88\uc9f8 \uc791\uc5c5\uc758 \ucc98\ub9ac \uc77c\uc218\ub97c \\(u_i\\) , \ube44\uc6a9\uc744 \\(c_i\\) , \uc2e4\uc81c \ucc98\ub9ac \uc77c\uc218 \\(p_i\\) \ub77c\uace0 \ud55c\ub2e4. \\(u_i\\) \ub300\ube44 1\uc77c \ub2e8\ucd95\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \ucd94\uac00 \ube44\uc6a9\uc744 \\(g_i\\) \ub77c\uace0 \ud558\uba74, \uc791\uc5c5 \\(i\\) \uc758 \ube44\uc6a9\uc740 \\(c_i + g_i(u_i - p_i)\\) \uac00 \ub41c\ub2e4. \ub2e4\ub9cc, \uc5b4\ub290 \uc815\ub3c4 \ub2e8\ucd95\ud574\ub3c4 \ub2e8\uc228\uc5d0 \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud558\uae30\uc5d0 \ucd5c\uc18c \ucc98\ub9ac \uc77c\uc218\ub97c \\(l_i\\) \ub77c\uace0 \ud55c\ub2e4. \uac01 \uc791\uc5c5 \\(i\\) \uc758 \uc2dc\uc791\uc77c\uc744 \\(s_i\\) \ub77c\uace0 \ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubb38\uc81c\ub97c \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc77c\uc815 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{i=1}^n c_i + g_i (u_i - p_i) \\] \\[\\begin{aligned}\\text{s.t. } & s_i + p_i \\leq s_j, \\quad l_i \\leq p_i \\leq u_i, \\\\ & s_i \\geq 0, \\quad s_n + p_n \\leq T \\\\ & i = 1, \\dots, n, \\quad j = 1, \\dots, n, \\quad i \\prec j \\end{aligned}\\] \uc0dd\uc0b0 \uacc4\ud68d \ubb38\uc81c \u00b6 \ud55c \uacf5\uc7a5\uc5d0\uc11c \\(m\\) \uc885\ub958\uc758 \uc6d0\ub8cc\ub97c \uc774\uc6a9\ud574 \\(n\\) \uc885\ub958\uc758 \uc81c\ud488\uc744 \uc0dd\uc0b0\ud568. \uace0\uac1d\uc758 \uc218\uc694\uc640 \uc0dd\uc0b0\ube44\uac00 \uc2dc\uae30\uc5d0 \ub530\ub77c \ubcc0\ud574\uc11c, \uacf5\uc7a5 \uc0dd\uc0b0\uacfc \ucc3d\uace0\uc758 \uc7ac\uace0\ub97c \uc870\ud569\ud574 \uace0\uac1d\uc5d0\uac8c \uc81c\ud488\uc744 \uc804\ub2ec\ud558\ub294 \uc0c1\ud669 \uc0dd\uc0b0\ube44\uc640 \uc7ac\uace0\ube44\uc758 \ud569\uacc4\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc5b4\ub290 \uc2dc\uae30\uc5d0 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc81c\ud488\uc744 \uc0dd\uc0b0\ud574\uc11c \ucc3d\uace0\uc758 \uc7ac\uace0\ub85c \ube44\ucd95\ud560 \uac83\uc778\uac00? \uc81c\ud488 \\(j\\) \ub97c \ud55c \ub2e8\uc704 \uc0dd\uc0b0\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc6d0\ub8cc \\(i\\) \uc758 \uc591\uc744 \\(a_{ij}\\) \ub77c\uace0\ud568. \uacc4\ud68d \uae30\uac04\uc744 \\(T\\) , \uac01 \uc2dc\uae30 \\(t\\) \uc758 \uc6d0\ub8cc \\(i\\) \uacf5\uae09\ub7c9\uc744 \\(b_{it}\\) , \uc81c\ud488 \\(j\\) \uc758 \uace0\uac1d \uc218\uc694\ub7c9\uc744 \\(d_{jt}\\) , \ub2e8\uc704\ub7c9\ub2f9 \uc0dd\uc0b0\ube44\ub97c \\(c_{jt}\\) , \uc7ac\uace0\ube44\ub97c \\(f_{jt}\\) \ub77c\uace0 \ud568. \\(t=0\\) \uc5d0\uc11c \uc7ac\uace0\ub7c9\uc744 0\uc73c\ub85c \ud558\uba70, \uac01 \uae30\uac04 \\(t\\) \uc758 \uc81c\ud488 \\(j\\) \uc758 \uc0dd\uc0b0\ub7c9\uc744 \\(x_{jt}\\) , \uc7ac\uace0\ub7c9\uc744 \\(s_{jt}\\) \ub77c\uace0 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc0dd\uc0b0 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{j=1}^n \\sum_{t=1}^T c_{jt}x_{jt} + f_{jt}s_{jt} \\] \\[\\begin{aligned}\\text{s.t. } & \\sum_{j=1}^n a_{ij}x_{jt} \\leq b_{it}, \\quad s_{j(t-1)} + x_{jt} - s_{jt} = d_{jt} \\\\ & s_{j0} = 0, \\quad x_{jt}, s_{jt} \\geq 0 \\\\ & i = 1, \\dots, m, \\quad j = 1, \\dots, n, \\quad t = 1, \\dots, T \\end{aligned}\\]","title":"Chapter 2"},{"location":"mathoptim/chapter2/#1","text":"\\[ \\begin{aligned} \\arg \\min\\ & c^Tx \\\\ \\text{s.t. } & Ax^T \\geq b, \\\\ & x \\geq 0 \\end{aligned}\\] where \\[\\begin{aligned} \\mathbf{A} &= \\begin{bmatrix} a_{11} & \\cdots & a_{1n} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{m_1} & \\cdots & a_{mn} \\end{bmatrix} \\in \\Bbb{R}^{m \\times n} \\end{aligned}\\] \\[\\begin{aligned} \\mathbf{b} &= \\begin{bmatrix} b_{1} \\\\ \\vdots \\\\ b_m \\end{bmatrix} \\in \\Bbb{R}^m, \\mathbf{c} = \\begin{bmatrix} c_{1} \\\\ \\vdots \\\\ c_n \\end{bmatrix} \\in \\Bbb{R}^n , \\mathbf{x} = \\begin{bmatrix} x_{1} \\\\ \\vdots \\\\ x_n \\end{bmatrix} \\in \\Bbb{R}^n \\end{aligned}\\]","title":"1. \uc120\ud615 \uacc4\ud68d \ubb38\uc81c"},{"location":"mathoptim/chapter2/#_1","text":"\uc81c\ud488\uc744 m\uac1c \uacf5\uc7a5\uc5d0\uc11c n\uac1c \uace0\uac1d\uc5d0\uac8c \ub0a9\uc785\ud574\uc57c \ud568. \uac01 \uacf5\uc7a5\uc758 \uc0dd\uc0b0\ub7c9\uc744 \ub118\uc9c0 \uc54a\ub294 \ubc94\uc704\uc5d0\uc11c \uace0\uac1d\uc758 \uc218\uc694\ub97c \ub9cc\uc871\uc2dc\ud0a4\ub3c4\ub85d \uc81c\ud488\uc744 \uc6b4\uc1a1\ud558\uace0\uc790 \ud568. \uc774\ub54c \uc6b4\uc1a1\ube44 \ud568\uac8c\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574\uc11c \uc5b4\ub290 \uacf5\uc7a5\uc5d0\uc11c \uc5b4\ub290 \uace0\uac1d\uc5d0\uac70 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc591\uc758 \uc81c\ud488\uc744 \uc6b4\uc1a1\ud558\ub294 \uac83\uc774 \uc88b\uc740\uac00? \uacf5\uc7a5 \\(i\\) \uc758 \uc0dd\uc0b0\ub7c9 \uc0c1\ud55c\uc744 \\(a_i\\) , \uace0\uac1d \\(j\\) \uc758 \uc218\uc694\ub7c9\uc744 \\(b_j\\) , \uacf5\uc7a5 \\(i\\) \uc5d0\uc11c \uace0\uac1d \\(j\\) \ub85c\uc758 \ub2e8\uc704\ub7c9\ub2f9 \uc6b4\uc1a1\ube44\ub97c \\(c_{ij}\\) , \uc6b4\uc1a1\ub7c9\uc744 \\(x_{ij}\\) \ub77c\uace0 \ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubb38\uc81c\ub97c \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc6b4\uc1a1 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{i=1}^m \\sum_{j=1}^n c_{ij}x_{ij}\\] \\[\\begin{aligned}\\text{s.t. } & \\sum_{i=1}^n x_{ij} \\leq a_i, \\quad \\sum_{i=1}^m x_{ij} = b_i, \\quad x_{ij} \\geq 0 \\\\ & i = 1, \\dots, m, \\quad j = 1, \\dots, n \\end{aligned}\\]","title":"\uc6b4\uc1a1 \uacc4\ud68d \ubb38\uc81c"},{"location":"mathoptim/chapter2/#_2","text":"\\(n\\) \uac1c\uc758 \uc791\uc5c5\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c0\ub294 \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\uace0, \uc55e\uc5d0\uc11c \uc9c4\ud589\ub41c \uc791\uc5c5\uc774 \ubaa8\ub450 \uc644\ub8cc\ub418\uc5b4\uc57c \ub2e4\uc74c \uc791\uc5c5 \uc9c4\ud589 \uac00\ub2a5\ud558\ub2e4. \uac01 \uc791\uc5c5\uc740 \uae30\ubcf8 \ucc98\ub9ac \ube44\uc6a9\uc774 \ub4e4\uba70, \uc5b4\ub290 \uc815\ub3c4 \ube44\uc6a9\uc744 \ucd94\uac00\ud574 \uc5b4\ub290 \uc815\ub3c4\uae4c\uc9c0 \ub0a0\uc9dc\ub97c \ub2e8\ucd95 \ud560 \uc218 \uc788\ub2e4. \uc804\uccb4 \\(T\\) \uc77c \uc774\ub0b4\uc5d0 \uc644\ub8cc\ud574\uc57c\ud558\ub294 \uc870\uac74\uc73c\ub85c \ube44\uc6a9 \ud569\uacc4\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574\uc11c \uac01 \uc791\uc5c5\uc758 \uc2dc\uc791\uc77c\uacfc \ucc98\ub9ac \uc77c\uc218\ub97c \uc5b4\ub5bb\uac8c \uc815\ud574\uc57c \ud560\uae4c? flowchart LR; A[Start]:::clsA --> B1((1)):::clsB --> B2((2)):::clsB B2 --> B3((3)):::clsB --> B5((5)):::clsB --> B7((7)):::clsB B2 --> B4((4)):::clsB --> B6((6)):::clsB --> B7 B4 --> B5 B7 --> A2[End]:::clsA classDef clsA fill:#f5c414; classDef clsB fill:#669dfa; \\(i\\) \ubc88\uc9f8 \uc791\uc5c5\uc758 \ucc98\ub9ac \uc77c\uc218\ub97c \\(u_i\\) , \ube44\uc6a9\uc744 \\(c_i\\) , \uc2e4\uc81c \ucc98\ub9ac \uc77c\uc218 \\(p_i\\) \ub77c\uace0 \ud55c\ub2e4. \\(u_i\\) \ub300\ube44 1\uc77c \ub2e8\ucd95\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \ucd94\uac00 \ube44\uc6a9\uc744 \\(g_i\\) \ub77c\uace0 \ud558\uba74, \uc791\uc5c5 \\(i\\) \uc758 \ube44\uc6a9\uc740 \\(c_i + g_i(u_i - p_i)\\) \uac00 \ub41c\ub2e4. \ub2e4\ub9cc, \uc5b4\ub290 \uc815\ub3c4 \ub2e8\ucd95\ud574\ub3c4 \ub2e8\uc228\uc5d0 \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud558\uae30\uc5d0 \ucd5c\uc18c \ucc98\ub9ac \uc77c\uc218\ub97c \\(l_i\\) \ub77c\uace0 \ud55c\ub2e4. \uac01 \uc791\uc5c5 \\(i\\) \uc758 \uc2dc\uc791\uc77c\uc744 \\(s_i\\) \ub77c\uace0 \ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubb38\uc81c\ub97c \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc77c\uc815 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{i=1}^n c_i + g_i (u_i - p_i) \\] \\[\\begin{aligned}\\text{s.t. } & s_i + p_i \\leq s_j, \\quad l_i \\leq p_i \\leq u_i, \\\\ & s_i \\geq 0, \\quad s_n + p_n \\leq T \\\\ & i = 1, \\dots, n, \\quad j = 1, \\dots, n, \\quad i \\prec j \\end{aligned}\\]","title":"\uc77c\uc815 \uacc4\ud68d \ubb38\uc81c"},{"location":"mathoptim/chapter2/#_3","text":"\ud55c \uacf5\uc7a5\uc5d0\uc11c \\(m\\) \uc885\ub958\uc758 \uc6d0\ub8cc\ub97c \uc774\uc6a9\ud574 \\(n\\) \uc885\ub958\uc758 \uc81c\ud488\uc744 \uc0dd\uc0b0\ud568. \uace0\uac1d\uc758 \uc218\uc694\uc640 \uc0dd\uc0b0\ube44\uac00 \uc2dc\uae30\uc5d0 \ub530\ub77c \ubcc0\ud574\uc11c, \uacf5\uc7a5 \uc0dd\uc0b0\uacfc \ucc3d\uace0\uc758 \uc7ac\uace0\ub97c \uc870\ud569\ud574 \uace0\uac1d\uc5d0\uac8c \uc81c\ud488\uc744 \uc804\ub2ec\ud558\ub294 \uc0c1\ud669 \uc0dd\uc0b0\ube44\uc640 \uc7ac\uace0\ube44\uc758 \ud569\uacc4\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc5b4\ub290 \uc2dc\uae30\uc5d0 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc81c\ud488\uc744 \uc0dd\uc0b0\ud574\uc11c \ucc3d\uace0\uc758 \uc7ac\uace0\ub85c \ube44\ucd95\ud560 \uac83\uc778\uac00? \uc81c\ud488 \\(j\\) \ub97c \ud55c \ub2e8\uc704 \uc0dd\uc0b0\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc6d0\ub8cc \\(i\\) \uc758 \uc591\uc744 \\(a_{ij}\\) \ub77c\uace0\ud568. \uacc4\ud68d \uae30\uac04\uc744 \\(T\\) , \uac01 \uc2dc\uae30 \\(t\\) \uc758 \uc6d0\ub8cc \\(i\\) \uacf5\uae09\ub7c9\uc744 \\(b_{it}\\) , \uc81c\ud488 \\(j\\) \uc758 \uace0\uac1d \uc218\uc694\ub7c9\uc744 \\(d_{jt}\\) , \ub2e8\uc704\ub7c9\ub2f9 \uc0dd\uc0b0\ube44\ub97c \\(c_{jt}\\) , \uc7ac\uace0\ube44\ub97c \\(f_{jt}\\) \ub77c\uace0 \ud568. \\(t=0\\) \uc5d0\uc11c \uc7ac\uace0\ub7c9\uc744 0\uc73c\ub85c \ud558\uba70, \uac01 \uae30\uac04 \\(t\\) \uc758 \uc81c\ud488 \\(j\\) \uc758 \uc0dd\uc0b0\ub7c9\uc744 \\(x_{jt}\\) , \uc7ac\uace0\ub7c9\uc744 \\(s_{jt}\\) \ub77c\uace0 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud615\uc2dd\ud654 \ud560 \uc218 \uc788\ub2e4. \uc0dd\uc0b0 \uacc4\ud68d \ubb38\uc81c \\[ \\arg \\min\\ \\sum_{j=1}^n \\sum_{t=1}^T c_{jt}x_{jt} + f_{jt}s_{jt} \\] \\[\\begin{aligned}\\text{s.t. } & \\sum_{j=1}^n a_{ij}x_{jt} \\leq b_{it}, \\quad s_{j(t-1)} + x_{jt} - s_{jt} = d_{jt} \\\\ & s_{j0} = 0, \\quad x_{jt}, s_{jt} \\geq 0 \\\\ & i = 1, \\dots, m, \\quad j = 1, \\dots, n, \\quad t = 1, \\dots, T \\end{aligned}\\]","title":"\uc0dd\uc0b0 \uacc4\ud68d \ubb38\uc81c"},{"location":"til/","text":"to 2022","title":"TIL"},{"location":"til/2022/","text":"Table of Contents \u00b6 Date Docs 2022.08.28 Disjoint Set and Union-find 2022.08.29 Steiner Tree Problem","title":"2022"},{"location":"til/2022/#table-of-contents","text":"Date Docs 2022.08.28 Disjoint Set and Union-find 2022.08.29 Steiner Tree Problem","title":"Table of Contents"},{"location":"til/2022/08-28-disjointset/","tags":["TIL"],"text":"Disjoint Set and Union-find \u00b6 Disjoint Set in Math \u00b6 \uc11c\ub85c\uc18c \uc9d1\ud569(Disjoint Set)\uc774\ub780 \uc9d1\ud569 \uac04\uc5d0 \uc0c1\ud638 \ubc30\ud0c0\uc801\uc778 \uc9d1\ud569\ub4e4\uc744 \ub9d0\ud55c\ub2e4 1 . \uc608\ub97c \ub4e4\uba74, \uc6b0\uce21 \uadf8\ub9bc\uacfc \uac19\uc774 A, B\uc640 C\uc758 \uc9d1\ud569\uc5d0\uc11c \uc11c\ub85c \uac19\uc740\uc0c9\uc774 \ud558\ub098\ub3c4 \uc5c6\ub294 \uac83\uc774\uba70, \uc774\ub97c \uc11c\ub85c\uc18c \uc9d1\ud569\uc774\ub77c\uace0 \ud55c\ub2e4. \uc218\uc2dd\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. \\[A_i \\cap A_j = \\emptyset \\quad \\forall i, j \\text{ where } i \\neq j \\] Disjoint Set in Data structure \u00b6 \ucef4\ud4e8\ud130 \uacfc\ud559\uc5d0\uc11c disjoint set \uc790\ub8cc \uad6c\uc870(union-find \uc790\ub8cc \uad6c\uc870 \ub610\ub294 merge-find \uc790\ub8cc \uad6c\uc870)\ub294 \uc11c\ub85c\uc18c \uc9d1\ud569\uc744 \uc800\uc7a5\ud558\ub294 \ub370\uc774\ud130 \uad6c\uc870\uc774\ub2e4 2 . \ucd08\uae30\ud654\ud558\ub294 make_set , \ucc3e\uae30\uc778 find \uadf8\ub9ac\uace0 \ubcd1\ud569\uc778 union \uc73c\ub85c \ucd1d 3 \uac1c\uc758 \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4. make_set(x) : x \ub97c \uc720\uc77c\ud55c \uc6d0\uc18c\ub85c \ud558\ub294 \uc0c8\ub85c\uc6b4 \uc9d1\ud569\uc744 \ub9cc\ub4e0\ub2e4. find(x) : x \uac00 \uc18d\ud55c \uc9d1\ud569\uc758 \ub300\ud45c \uac12(\ub8e8\ud2b8 \ub178\ub4dc \uac12)\uc744 \ubc18\ud658\ud55c\ub2e4. union(x, y) : x \uac00 \uc18d\ud55c \uc9d1\ud569\uacfc y \uac00 \uc18d\ud55c \uc9d1\ud569\uc744 \ud569\uce5c\ub2e4. Implementation \u00b6 \ubd80\ubaa8 \ub178\ub4dc\uc758 \uc704\uce58\ub9cc \uc54c\uba74 \ub428\uc73c\ub85c, parent\uc758 \uad6c\ud604\uc740 \uc2e4\uc81c \ud2b8\ub9ac\uac00 \uc544\ub2cc dictionary\ub85c \ub9cc\ub4e4\uc5c8\ub2e4. union \uc758 \uacbd\uc6b0, \ub9cc\uc57d \uac19\uc740 \ubd80\ubaa8 \ub8e8\ud2b8\uac00 \uc544\ub2c8\ub77c\uba74, \ud56d\uc0c1 y \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub97c x \ub178\ub4dc\uc758 \ub8e8\ud2b8\ub85c \ubc14\uafbc\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class DisjointSet (): \"\"\"DisjointSet\"\"\" def __init__ ( self ) -> None : self . parent = {} def make_set ( self , x : List [ int ]): for node in x : self . parent [ node ] = node def find ( self , x : int ): if x == self . parent [ x ]: return x return self . find ( self . parent [ x ]) def union ( self , x : int , y : int ): x_parent = self . find ( x ) y_parent = self . find ( y ) if x_parent == y_parent : return self . parent [ y_parent ] = x_parent \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc774 3\uac1c\uc758 \ud2b8\ub9ac\ub85c \uad6c\uc131\ub41c disjoint set\uc744 \uad6c\ud604\ud574\ubcf4\uc790. flowchart BT; a2((2)):::c1 --> a1((1)):::c1; a3((3)):::c1 --> a1; a4((4)):::c1 --> a1; a6((6)):::c2 --> a5((5)):::c2; classDef c1 fill:#f79f94; classDef c2 fill:#87c5d6; \uc704 \uadf8\ub798\ud504\uc5d0 \ub530\ub978 \uc5f0\uc0b0\uc744 \uc218\ud589 \uc2dc disjoint set\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 x = [ 1 , 2 , 3 , 4 , 5 , 6 ] unions = [( 1 , 2 ), ( 2 , 3 ), ( 2 , 4 ), ( 5 , 6 )] dis_set = DisjointSet () dis_set . make_set ( x ) for u , v in unions : # v \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\uac00 u \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub85c \ub428 dis_set . union ( u , v ) Path Compression \u00b6 find \ud568\uc218\uc5d0\uc11c \uac01 \ub178\ub4dc\uac00 \ucd5c\uc885 \ub8e8\ud2b8 \ub178\ub4dc\ub9cc \uac00\ub974\ud0a4\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0, \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8\uc640 \uac19\uc740 \ud2b8\ub9ac\uc758 \uacbd\uc6b0 \ube44\ud6a8\uc728\uc801\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \\(5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1\\) \uc778 \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8(\ud2b8\ub9ac)\uc5d0\uc11c disjoint set(1\uac1c)\uc744 \ub9cc\ub4e4\ub824\uba74, \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 x = [ 1 , 2 , 3 , 4 , 5 ] unions = [( 4 , 5 ), ( 3 , 4 ), ( 2 , 3 ), ( 1 , 2 )] # 5 > 4 > 3 > 2 > 1 dis_set = DisjointSet () dis_set . make_set ( x ) for u , v in unions : dis_set . union ( u , v ) \uacb0\uad6d\uc5d0\ub294 \ucc98\uc74c \ub05d\uae4c\uc9c0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, find(5) \uc77c \ub54c \ubaa8\ub4e0 \uc790\uc2dd \ub178\ub4dc\ub97c \uac70\uccd0\uc11c 5 \ub97c \ucc3e\uc544\uc57c\ud55c\ub2e4. \uc774\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574\uc11c find \ud568\uc218\ub97c \uac70\uce58\uba74\uc11c \uac01 \uc790\uc2dd \ub178\ub4dc\ub4e4\uc774 \ubcf8\ub798\uc758 \ub8e8\ud2b8 \ub178\ub4dc\uc640 \uc9c1\uc811 \uc5f0\uacb0\ud558\uac8c \ub9cc\ub4dc\ub294 \uacfc\uc815\uc744 Path Compression \uc774\ub77c\uace0 \ud55c\ub2e4. \ucf54\ub4dc\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 find \ubd80\ubd84\uc744 \uc218\uc815\ud55c\ub2e4. 1 2 3 4 5 6 7 def find ( self , x : int ): if x == self . parent [ x ]: return x # path compression self . parent [ x ] = self . find ( self . parent [ x ]) return self . parent [ x ] \uadf8\ub9ac\uace0 union \uc218\ud589 \ud6c4, \uc55e\uc73c\ub85c find \ud568\uc218\ub85c \ud638\ucd9c\ud558\uba74 \ud574\ub2f9 \uacbd\ub85c\uc5d0 \uc788\ub294 \uacbd\ub85c\ub294 \uc555\ucd95\uc774 \ub41c\ub2e4. \uc704 \uc218\uc815\ub41c find \ucf54\ub4dc \uc5d0\uc11c 5\ubc88 \ub77c\uc778 \uc7ac\uadc0 \ud568\uc218\ub97c \ub8e8\ud2b8 \ub178\ub4dc \uae4c\uc9c0 \ud638\ucd9c \ud55c \ub2e4\uc74c\uc5d0 \uc7ac\uadc0\ub97c \ube60\uc838\ub098\uc624\uba74\uc11c \ub8e8\ud2b8\uac00 \uc218\uc815\uc774 \ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 find(5) \ub97c \uc218\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. dis_set . find ( 5 ) Rank Compression \u00b6 Rank Compression\uc740 \ub450 \ud2b8\ub9ac\ub97c \ud569\ubcd1 \ud560 \ub54c, \ud56d\uc0c1 \ub192\uc774\uac00 \ub354 \ub0ae\uc740 \ud2b8\ub9ac\ub97c \ub192\uc740 \ud2b8\ub9ac \ubc11\uc5d0 \ub123\ub294 \ubc29\ubc95\uc774\ub2e4. \uae30\uc874\uc758 \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. __init__ make_set union rank \uc800\uc7a5\ud560 \uacf5\uac04\uc744 dictionary\ub85c \uad6c\uc131\ud55c\ub2e4. 1 2 3 def __init__ ( self ) -> None : self . parent = {} self . rank = {} rank \uc800\uc7a5\ud560 \uacf5\uac04\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. 1 2 3 4 def make_set ( self , x : List [ int ]): for node in x : self . parent [ node ] = node self . rank [ node ] = 0 \ud56d\uc0c1 rank\uac00 \ub0ae\uc740 \ud2b8\ub9ac\ub294 \ub192\uc740 \ud2b8\ub9ac\uc758 root\ub85c \ud569\ubcd1\ub41c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uae30\uc874\ub300\ub85c x \uc758 \ub8e8\ud2b8\ub85c \ud569\ubcd1\ub418\uba70, rank\uac00 \uac19\uc740 \uacbd\uc6b0\uc5d0\ub294 x \ub8e8\ud2b8\ub9cc \ud558\ub098 \uc0c1\uc2b9\uc2dc\ud0a8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def union ( self , x : int , y : int ): x_parent = self . find ( x ) y_parent = self . find ( y ) if x_parent == y_parent : return # rank compression if self . rank [ x_parent ] < self . rank [ y_parent ]: self . parent [ x_parent ] = y_parent else : self . parent [ y_parent ] = x_parent if self . rank [ x_parent ] == self . rank [ y_parent ]: self . rank [ x_parent ] += 1 Rank compression \uc774\ud6c4\uc5d0 \uc790\ub3d9\uc73c\ub85c union\uc2dc \ud558\ub098\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub9cc \uac00\ub974\ud0a4\uac8c \ub41c\ub2e4. Why using tree structure? \u00b6 Disjoint set \uc790\ub8cc\uad6c\uc870\ub97c \ud2b8\ub9ac\ub85c \uad6c\ud604\ud558\ub294 \uc774\uc720\ub294 \ubc30\uc5f4\ub85c \uad6c\ud604 \ud560 \uacbd\uc6b0, union \uc5d0\uc11c \ubc30\uc5f4\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc21c\ud68c\ud558\uba74\uc11c \ubc14\uafd4\uc918\uc57c \ud55c\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4( union : \\(O(N)\\) , find : \\(O(1)\\) ). \ubc18\uba74 rank compression\ub41c \ud2b8\ub9ac\ub85c \uad6c\ud604 \uc2dc, union \uc740 \ub8e8\ud2b8 \ub178\ub4dc\ub97c \ucc3e\uc544\uc11c \ub2e4\ub974\uba74 \ud569\uce58\uae30\ub9cc \ud558\uba74 \ub418\uc11c, find \uc5f0\uc0b0\uc5d0 \uc804\uc801\uc73c\ub85c \uc758\uc874\ud558\uac8c \ub41c\ub2e4. \ud2b8\ub9ac\uc758 \ub192\uc774\uc5d0 \uc758\ud574 \uacb0\uc815\ub418\uace0, \ucd5c\uc545\uc758 \uacbd\uc6b0 \\(O(\\log N)\\) \uc774 \ub418\uc11c, \ud5a5\uc0c1\ub41c \uc131\ub2a5\uc744 \ub0bc \uc218\uac00 \uc788\ub2e4 2 4 5 . python\uc5d0\uc11c\ub294 dictionary( dict ) \uc790\ub8cc \uad6c\uc870\ub85c \uc9c4\ud589\ud588\uc9c0\ub9cc \ud2b8\ub9ac \ud074\ub798\uc2a4\ub97c \uc9c1\uc811 \ub9cc\ub4e4\uc5b4\uc11c \uad6c\ud604\ud574 \ubcfc \uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. Disjoint sets \u21a9 Disjoint-set data structure \u21a9 \u21a9 Disjoint Set & Union-find \u21a9 gmlwjd9405 - Union-Find \uc54c\uace0\ub9ac\uc998 \u21a9 bowbowbow - Union-Find: Disjoint Set\uc758 \ud45c\ud604 \u21a9","title":"08.28 Disjoint Set and Union-find"},{"location":"til/2022/08-28-disjointset/#disjoint-set-and-union-find","text":"","title":"Disjoint Set and Union-find"},{"location":"til/2022/08-28-disjointset/#disjoint-set-in-math","text":"\uc11c\ub85c\uc18c \uc9d1\ud569(Disjoint Set)\uc774\ub780 \uc9d1\ud569 \uac04\uc5d0 \uc0c1\ud638 \ubc30\ud0c0\uc801\uc778 \uc9d1\ud569\ub4e4\uc744 \ub9d0\ud55c\ub2e4 1 . \uc608\ub97c \ub4e4\uba74, \uc6b0\uce21 \uadf8\ub9bc\uacfc \uac19\uc774 A, B\uc640 C\uc758 \uc9d1\ud569\uc5d0\uc11c \uc11c\ub85c \uac19\uc740\uc0c9\uc774 \ud558\ub098\ub3c4 \uc5c6\ub294 \uac83\uc774\uba70, \uc774\ub97c \uc11c\ub85c\uc18c \uc9d1\ud569\uc774\ub77c\uace0 \ud55c\ub2e4. \uc218\uc2dd\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. \\[A_i \\cap A_j = \\emptyset \\quad \\forall i, j \\text{ where } i \\neq j \\]","title":"Disjoint Set in Math"},{"location":"til/2022/08-28-disjointset/#disjoint-set-in-data-structure","text":"\ucef4\ud4e8\ud130 \uacfc\ud559\uc5d0\uc11c disjoint set \uc790\ub8cc \uad6c\uc870(union-find \uc790\ub8cc \uad6c\uc870 \ub610\ub294 merge-find \uc790\ub8cc \uad6c\uc870)\ub294 \uc11c\ub85c\uc18c \uc9d1\ud569\uc744 \uc800\uc7a5\ud558\ub294 \ub370\uc774\ud130 \uad6c\uc870\uc774\ub2e4 2 . \ucd08\uae30\ud654\ud558\ub294 make_set , \ucc3e\uae30\uc778 find \uadf8\ub9ac\uace0 \ubcd1\ud569\uc778 union \uc73c\ub85c \ucd1d 3 \uac1c\uc758 \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4. make_set(x) : x \ub97c \uc720\uc77c\ud55c \uc6d0\uc18c\ub85c \ud558\ub294 \uc0c8\ub85c\uc6b4 \uc9d1\ud569\uc744 \ub9cc\ub4e0\ub2e4. find(x) : x \uac00 \uc18d\ud55c \uc9d1\ud569\uc758 \ub300\ud45c \uac12(\ub8e8\ud2b8 \ub178\ub4dc \uac12)\uc744 \ubc18\ud658\ud55c\ub2e4. union(x, y) : x \uac00 \uc18d\ud55c \uc9d1\ud569\uacfc y \uac00 \uc18d\ud55c \uc9d1\ud569\uc744 \ud569\uce5c\ub2e4.","title":"Disjoint Set in Data structure"},{"location":"til/2022/08-28-disjointset/#implementation","text":"\ubd80\ubaa8 \ub178\ub4dc\uc758 \uc704\uce58\ub9cc \uc54c\uba74 \ub428\uc73c\ub85c, parent\uc758 \uad6c\ud604\uc740 \uc2e4\uc81c \ud2b8\ub9ac\uac00 \uc544\ub2cc dictionary\ub85c \ub9cc\ub4e4\uc5c8\ub2e4. union \uc758 \uacbd\uc6b0, \ub9cc\uc57d \uac19\uc740 \ubd80\ubaa8 \ub8e8\ud2b8\uac00 \uc544\ub2c8\ub77c\uba74, \ud56d\uc0c1 y \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub97c x \ub178\ub4dc\uc758 \ub8e8\ud2b8\ub85c \ubc14\uafbc\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class DisjointSet (): \"\"\"DisjointSet\"\"\" def __init__ ( self ) -> None : self . parent = {} def make_set ( self , x : List [ int ]): for node in x : self . parent [ node ] = node def find ( self , x : int ): if x == self . parent [ x ]: return x return self . find ( self . parent [ x ]) def union ( self , x : int , y : int ): x_parent = self . find ( x ) y_parent = self . find ( y ) if x_parent == y_parent : return self . parent [ y_parent ] = x_parent \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc774 3\uac1c\uc758 \ud2b8\ub9ac\ub85c \uad6c\uc131\ub41c disjoint set\uc744 \uad6c\ud604\ud574\ubcf4\uc790. flowchart BT; a2((2)):::c1 --> a1((1)):::c1; a3((3)):::c1 --> a1; a4((4)):::c1 --> a1; a6((6)):::c2 --> a5((5)):::c2; classDef c1 fill:#f79f94; classDef c2 fill:#87c5d6; \uc704 \uadf8\ub798\ud504\uc5d0 \ub530\ub978 \uc5f0\uc0b0\uc744 \uc218\ud589 \uc2dc disjoint set\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 x = [ 1 , 2 , 3 , 4 , 5 , 6 ] unions = [( 1 , 2 ), ( 2 , 3 ), ( 2 , 4 ), ( 5 , 6 )] dis_set = DisjointSet () dis_set . make_set ( x ) for u , v in unions : # v \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\uac00 u \ub178\ub4dc\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub85c \ub428 dis_set . union ( u , v )","title":"Implementation"},{"location":"til/2022/08-28-disjointset/#path-compression","text":"find \ud568\uc218\uc5d0\uc11c \uac01 \ub178\ub4dc\uac00 \ucd5c\uc885 \ub8e8\ud2b8 \ub178\ub4dc\ub9cc \uac00\ub974\ud0a4\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0, \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8\uc640 \uac19\uc740 \ud2b8\ub9ac\uc758 \uacbd\uc6b0 \ube44\ud6a8\uc728\uc801\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \\(5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1\\) \uc778 \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8(\ud2b8\ub9ac)\uc5d0\uc11c disjoint set(1\uac1c)\uc744 \ub9cc\ub4e4\ub824\uba74, \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 x = [ 1 , 2 , 3 , 4 , 5 ] unions = [( 4 , 5 ), ( 3 , 4 ), ( 2 , 3 ), ( 1 , 2 )] # 5 > 4 > 3 > 2 > 1 dis_set = DisjointSet () dis_set . make_set ( x ) for u , v in unions : dis_set . union ( u , v ) \uacb0\uad6d\uc5d0\ub294 \ucc98\uc74c \ub05d\uae4c\uc9c0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, find(5) \uc77c \ub54c \ubaa8\ub4e0 \uc790\uc2dd \ub178\ub4dc\ub97c \uac70\uccd0\uc11c 5 \ub97c \ucc3e\uc544\uc57c\ud55c\ub2e4. \uc774\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574\uc11c find \ud568\uc218\ub97c \uac70\uce58\uba74\uc11c \uac01 \uc790\uc2dd \ub178\ub4dc\ub4e4\uc774 \ubcf8\ub798\uc758 \ub8e8\ud2b8 \ub178\ub4dc\uc640 \uc9c1\uc811 \uc5f0\uacb0\ud558\uac8c \ub9cc\ub4dc\ub294 \uacfc\uc815\uc744 Path Compression \uc774\ub77c\uace0 \ud55c\ub2e4. \ucf54\ub4dc\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 find \ubd80\ubd84\uc744 \uc218\uc815\ud55c\ub2e4. 1 2 3 4 5 6 7 def find ( self , x : int ): if x == self . parent [ x ]: return x # path compression self . parent [ x ] = self . find ( self . parent [ x ]) return self . parent [ x ] \uadf8\ub9ac\uace0 union \uc218\ud589 \ud6c4, \uc55e\uc73c\ub85c find \ud568\uc218\ub85c \ud638\ucd9c\ud558\uba74 \ud574\ub2f9 \uacbd\ub85c\uc5d0 \uc788\ub294 \uacbd\ub85c\ub294 \uc555\ucd95\uc774 \ub41c\ub2e4. \uc704 \uc218\uc815\ub41c find \ucf54\ub4dc \uc5d0\uc11c 5\ubc88 \ub77c\uc778 \uc7ac\uadc0 \ud568\uc218\ub97c \ub8e8\ud2b8 \ub178\ub4dc \uae4c\uc9c0 \ud638\ucd9c \ud55c \ub2e4\uc74c\uc5d0 \uc7ac\uadc0\ub97c \ube60\uc838\ub098\uc624\uba74\uc11c \ub8e8\ud2b8\uac00 \uc218\uc815\uc774 \ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 find(5) \ub97c \uc218\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. dis_set . find ( 5 )","title":"Path Compression"},{"location":"til/2022/08-28-disjointset/#rank-compression","text":"Rank Compression\uc740 \ub450 \ud2b8\ub9ac\ub97c \ud569\ubcd1 \ud560 \ub54c, \ud56d\uc0c1 \ub192\uc774\uac00 \ub354 \ub0ae\uc740 \ud2b8\ub9ac\ub97c \ub192\uc740 \ud2b8\ub9ac \ubc11\uc5d0 \ub123\ub294 \ubc29\ubc95\uc774\ub2e4. \uae30\uc874\uc758 \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. __init__ make_set union rank \uc800\uc7a5\ud560 \uacf5\uac04\uc744 dictionary\ub85c \uad6c\uc131\ud55c\ub2e4. 1 2 3 def __init__ ( self ) -> None : self . parent = {} self . rank = {} rank \uc800\uc7a5\ud560 \uacf5\uac04\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. 1 2 3 4 def make_set ( self , x : List [ int ]): for node in x : self . parent [ node ] = node self . rank [ node ] = 0 \ud56d\uc0c1 rank\uac00 \ub0ae\uc740 \ud2b8\ub9ac\ub294 \ub192\uc740 \ud2b8\ub9ac\uc758 root\ub85c \ud569\ubcd1\ub41c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uae30\uc874\ub300\ub85c x \uc758 \ub8e8\ud2b8\ub85c \ud569\ubcd1\ub418\uba70, rank\uac00 \uac19\uc740 \uacbd\uc6b0\uc5d0\ub294 x \ub8e8\ud2b8\ub9cc \ud558\ub098 \uc0c1\uc2b9\uc2dc\ud0a8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def union ( self , x : int , y : int ): x_parent = self . find ( x ) y_parent = self . find ( y ) if x_parent == y_parent : return # rank compression if self . rank [ x_parent ] < self . rank [ y_parent ]: self . parent [ x_parent ] = y_parent else : self . parent [ y_parent ] = x_parent if self . rank [ x_parent ] == self . rank [ y_parent ]: self . rank [ x_parent ] += 1 Rank compression \uc774\ud6c4\uc5d0 \uc790\ub3d9\uc73c\ub85c union\uc2dc \ud558\ub098\uc758 \ub8e8\ud2b8 \ub178\ub4dc\ub9cc \uac00\ub974\ud0a4\uac8c \ub41c\ub2e4.","title":"Rank Compression"},{"location":"til/2022/08-28-disjointset/#why-using-tree-structure","text":"Disjoint set \uc790\ub8cc\uad6c\uc870\ub97c \ud2b8\ub9ac\ub85c \uad6c\ud604\ud558\ub294 \uc774\uc720\ub294 \ubc30\uc5f4\ub85c \uad6c\ud604 \ud560 \uacbd\uc6b0, union \uc5d0\uc11c \ubc30\uc5f4\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc21c\ud68c\ud558\uba74\uc11c \ubc14\uafd4\uc918\uc57c \ud55c\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4( union : \\(O(N)\\) , find : \\(O(1)\\) ). \ubc18\uba74 rank compression\ub41c \ud2b8\ub9ac\ub85c \uad6c\ud604 \uc2dc, union \uc740 \ub8e8\ud2b8 \ub178\ub4dc\ub97c \ucc3e\uc544\uc11c \ub2e4\ub974\uba74 \ud569\uce58\uae30\ub9cc \ud558\uba74 \ub418\uc11c, find \uc5f0\uc0b0\uc5d0 \uc804\uc801\uc73c\ub85c \uc758\uc874\ud558\uac8c \ub41c\ub2e4. \ud2b8\ub9ac\uc758 \ub192\uc774\uc5d0 \uc758\ud574 \uacb0\uc815\ub418\uace0, \ucd5c\uc545\uc758 \uacbd\uc6b0 \\(O(\\log N)\\) \uc774 \ub418\uc11c, \ud5a5\uc0c1\ub41c \uc131\ub2a5\uc744 \ub0bc \uc218\uac00 \uc788\ub2e4 2 4 5 . python\uc5d0\uc11c\ub294 dictionary( dict ) \uc790\ub8cc \uad6c\uc870\ub85c \uc9c4\ud589\ud588\uc9c0\ub9cc \ud2b8\ub9ac \ud074\ub798\uc2a4\ub97c \uc9c1\uc811 \ub9cc\ub4e4\uc5b4\uc11c \uad6c\ud604\ud574 \ubcfc \uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. Disjoint sets \u21a9 Disjoint-set data structure \u21a9 \u21a9 Disjoint Set & Union-find \u21a9 gmlwjd9405 - Union-Find \uc54c\uace0\ub9ac\uc998 \u21a9 bowbowbow - Union-Find: Disjoint Set\uc758 \ud45c\ud604 \u21a9","title":"Why using tree structure?"},{"location":"til/2022/08-29-steiner_tree/","tags":["TIL"],"text":"Steiner Tree Problem \u00b6 Steiner tree problem \ud639\uc740 minimum Steiner tree problem\uc740 \uc870\ud569\uc758 \ucd5c\uc801\ud654 \ubb38\uc81c\uc758 \ud55c \uc885\ub958\ub97c \ub9d0\ud55c\ub2e4 1 . \uc5ec\ub7ec \uc124\uc815\uc774 \uc788\uc9c0\ub9cc, \ubcf4\ud1b5\uc740 \uadf8\ub798\ud504\uc5d0\uc11c \uc815\uc758\ud558\ub294 \ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac(minimum spanning tree, MST) \ubb38\uc81c\ub97c \uc790\uc8fc \uc0ac\uc6a9\ud55c\ub2e4. Problem Definition: Minimum Spanning Tree \u00b6 \ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac(Minimum Spanning Tree, MST) 2 \ub294 \uadf8\ub798\ud504 \ub0b4\uc5d0\uc11c \ubaa8\ub4e0 \uc810(vertices)\ub97c \uac00\ub2a5\ud55c \ucd5c\uc18c \ucd1d \uac04\uc120(edge) \uac00\uc911\uce58\ub85c \uc5f0\uacb0\ud558\ub294 \ubb34\ubc29\ud5a5 \uadf8\ub798\ud504\uc758 \ubd80\ubd84 \uc9d1\ud569\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc740 \uadf8\ub798\ud504 \\(G(V=6, E=9)\\) \uc5d0\uc11c, flowchart LR; a1((1)) --- |5| a2((2)) --- |2| a3((3)) a1 --- |4| a3 a2 --- |7| a4((4)) a3 --- |6| a4 a3 --- |11| a5((5)) a4 --- |3| a5 --- |8| a6((6)) a4 --- |8| a6 \ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. flowchart LR; a1((1)) --- |4| a3((3)) a2((2)) --- |2| a3 a3 --- |6| a4((4)) --- |8| a6((6)) a4 --- |3| a5((5)) Algorithms \u00b6 \ud0d0\uc695\uc801\uc778(greedy) \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\uc758 \ubaa8\ub4e0 \uc815\uc810\uc744 \ucd5c\uc18c \ube44\uc6a9\uc73c\ub85c \uc5f0\uacb0\ud558\ub294 \ucd5c\uc801 \ud574\ub2f5\uc744 \uad6c\ud558\ub294 Kruskal \uacfc Prim \uc54c\uace0\ub9ac\uc998\uc774 \uc788\ub2e4. Kruskal \u00b6 MST\uc758 \uc870\uac74 (1) \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub85c \ubaa8\ub4e0 \ub178\ub4dc\uac00 \uc5f0\uacb0\ub418\uace0 (2) \ubb34\ubc29\ud5a5 \ube44\uc21c\ud658(nondirect acyclic) \uc5d0 \ub9de\ucdb0 \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub97c \ub9e4 \uc2a4\ud0ed\uc5d0\uc11c \uc120\ud0dd\ud558\uac8c \ub41c\ub2e4. Union-find \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac19\uc740 \uc11c\ub85c\uc18c \uc9d1\ud569\uc774 \uc544\ub2cc \uacbd\uc6b0\uc5d0 edge\ub97c \uc120\ud0dd\ud558\uace0, \uc0ac\uc774\ud074 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. Pseudocode 3 1 2 3 4 5 6 7 8 9 algorithm Kruskal(G) is F:= \u2205 for each v \u2208 G.V do MAKE-SET(v) for each (u, v) in G.E ordered by weight(u, v), increasing do if FIND-SET(u) \u2260 FIND-SET(v) then F:= F \u222a {(u, v)} \u222a {(v, u)} UNION(FIND-SET(u), FIND-SET(v)) return F Disjoint Set \uc790\ub8cc\uad6c\uc870\ub294 Disjoint Set and Union-find \uae00\uc744 \ucc38\uace0 8\ubc88 \ub77c\uc778\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc774\ud074 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. \ucf54\ub4dc\ub85c \uad6c\ud604\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def Kruskal ( G : nx . Graph ): \"\"\" algorithm Kruskal(G) is F:= \u2205 for each v \u2208 G.V do MAKE-SET(v) for each (u, v) in G.E ordered by weight(u, v), increasing do if FIND-SET(u) \u2260 FIND-SET(v) then F:= F U {(u, v)} U {(v, u)} UNION(FIND-SET(u), FIND-SET(v)) return F \"\"\" F = set () disjoint_set = DisjointSet () disjoint_set . make_set ( G . nodes ()) # MAKE-SET # Sort edges & weights in ascending order edges_weights = nx . get_edge_attributes ( G , 'weight' ) # return as Dict[tuple, int] sorted_edges_weights = sorted ( edges_weights . items (), key = lambda x : x [ 1 ], reverse = False ) # Union-Find Algorithm for ( u , v ), w in sorted_edges_weights : if disjoint_set . find ( u ) != disjoint_set . find ( v ): F = F . union ({( u , v , w )}) . union ({( v , u , w )}) disjoint_set . union ( u , v ) # +) Spanning Tree \uc815\uc758\uc0c1 \ucd5c\ub300 N-1\uac1c\uc758 edge\uac00 \uc788\uc73c\ubbc0\ub85c # \ud574\ub2f9 \uc870\uac74\uc5d0 \ub9de\ucdb0 break \uac78 \uc218\ub3c4 \uc788\ub2e4. return F , disjoint_set \uad6c\ud604\ud55c \ucf54\ub4dc\uc758 \uacb0\uacfc\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd5c\uc18c \ube44\uc6a9\uc73c\ub85c \uc5f0\uacb0\ud558\ub294 edge\ub4e4\uc744 \ucc3e\uc544\ub0b8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 Union-Find \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac01 \uc2a4\ud15d \ubcc4\ub85c \ucd5c\uc18c \ube44\uc6a9\uc744 \ub2f4\ub294 edge\ub4e4\uc758 \uc9d1\ud569 F \uac00 \uc5b4\ub5bb\uac8c \uacb0\ud569\uc774 \ub418\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 Union-Find \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac01 \uc2a4\ud15d \ubcc4\ub85c disjoint set \uac00 \uc5b4\ub5bb\uac8c \uacb0\ud569\uc774 \ub418\uc5ec \uc0ac\uc774\ud074\uc758 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4. Prim \u00b6 \uc2dc\uc791 vertex\uc744 \uc120\ud0dd\ud55c \ud6c4\uc5d0 \uc778\uc811\ud55c edges\uc911 \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub97c \uc5f0\uacb0\ub41c vertex\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc120\ud0dd\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. Wikipedia - Steiner tree problem \u21a9 Minimum spanning tree \u21a9 Kruskal's algorithm \u21a9 Prim's algorithm \u21a9 \uc288\ud0c0\uc774\ub108 \ud2b8\ub9ac 2-\uadfc\uc0ac \uc54c\uace0\ub9ac\uc998 \u21a9","title":"08.29 Steiner Tree Problem"},{"location":"til/2022/08-29-steiner_tree/#steiner-tree-problem","text":"Steiner tree problem \ud639\uc740 minimum Steiner tree problem\uc740 \uc870\ud569\uc758 \ucd5c\uc801\ud654 \ubb38\uc81c\uc758 \ud55c \uc885\ub958\ub97c \ub9d0\ud55c\ub2e4 1 . \uc5ec\ub7ec \uc124\uc815\uc774 \uc788\uc9c0\ub9cc, \ubcf4\ud1b5\uc740 \uadf8\ub798\ud504\uc5d0\uc11c \uc815\uc758\ud558\ub294 \ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac(minimum spanning tree, MST) \ubb38\uc81c\ub97c \uc790\uc8fc \uc0ac\uc6a9\ud55c\ub2e4.","title":"Steiner Tree Problem"},{"location":"til/2022/08-29-steiner_tree/#problem-definition-minimum-spanning-tree","text":"\ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac(Minimum Spanning Tree, MST) 2 \ub294 \uadf8\ub798\ud504 \ub0b4\uc5d0\uc11c \ubaa8\ub4e0 \uc810(vertices)\ub97c \uac00\ub2a5\ud55c \ucd5c\uc18c \ucd1d \uac04\uc120(edge) \uac00\uc911\uce58\ub85c \uc5f0\uacb0\ud558\ub294 \ubb34\ubc29\ud5a5 \uadf8\ub798\ud504\uc758 \ubd80\ubd84 \uc9d1\ud569\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc740 \uadf8\ub798\ud504 \\(G(V=6, E=9)\\) \uc5d0\uc11c, flowchart LR; a1((1)) --- |5| a2((2)) --- |2| a3((3)) a1 --- |4| a3 a2 --- |7| a4((4)) a3 --- |6| a4 a3 --- |11| a5((5)) a4 --- |3| a5 --- |8| a6((6)) a4 --- |8| a6 \ucd5c\uc18c \uc2a4\ud328\ub2dd \ud2b8\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. flowchart LR; a1((1)) --- |4| a3((3)) a2((2)) --- |2| a3 a3 --- |6| a4((4)) --- |8| a6((6)) a4 --- |3| a5((5))","title":"Problem Definition: Minimum Spanning Tree"},{"location":"til/2022/08-29-steiner_tree/#algorithms","text":"\ud0d0\uc695\uc801\uc778(greedy) \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\uc758 \ubaa8\ub4e0 \uc815\uc810\uc744 \ucd5c\uc18c \ube44\uc6a9\uc73c\ub85c \uc5f0\uacb0\ud558\ub294 \ucd5c\uc801 \ud574\ub2f5\uc744 \uad6c\ud558\ub294 Kruskal \uacfc Prim \uc54c\uace0\ub9ac\uc998\uc774 \uc788\ub2e4.","title":"Algorithms"},{"location":"til/2022/08-29-steiner_tree/#kruskal","text":"MST\uc758 \uc870\uac74 (1) \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub85c \ubaa8\ub4e0 \ub178\ub4dc\uac00 \uc5f0\uacb0\ub418\uace0 (2) \ubb34\ubc29\ud5a5 \ube44\uc21c\ud658(nondirect acyclic) \uc5d0 \ub9de\ucdb0 \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub97c \ub9e4 \uc2a4\ud0ed\uc5d0\uc11c \uc120\ud0dd\ud558\uac8c \ub41c\ub2e4. Union-find \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac19\uc740 \uc11c\ub85c\uc18c \uc9d1\ud569\uc774 \uc544\ub2cc \uacbd\uc6b0\uc5d0 edge\ub97c \uc120\ud0dd\ud558\uace0, \uc0ac\uc774\ud074 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. Pseudocode 3 1 2 3 4 5 6 7 8 9 algorithm Kruskal(G) is F:= \u2205 for each v \u2208 G.V do MAKE-SET(v) for each (u, v) in G.E ordered by weight(u, v), increasing do if FIND-SET(u) \u2260 FIND-SET(v) then F:= F \u222a {(u, v)} \u222a {(v, u)} UNION(FIND-SET(u), FIND-SET(v)) return F Disjoint Set \uc790\ub8cc\uad6c\uc870\ub294 Disjoint Set and Union-find \uae00\uc744 \ucc38\uace0 8\ubc88 \ub77c\uc778\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc774\ud074 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. \ucf54\ub4dc\ub85c \uad6c\ud604\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def Kruskal ( G : nx . Graph ): \"\"\" algorithm Kruskal(G) is F:= \u2205 for each v \u2208 G.V do MAKE-SET(v) for each (u, v) in G.E ordered by weight(u, v), increasing do if FIND-SET(u) \u2260 FIND-SET(v) then F:= F U {(u, v)} U {(v, u)} UNION(FIND-SET(u), FIND-SET(v)) return F \"\"\" F = set () disjoint_set = DisjointSet () disjoint_set . make_set ( G . nodes ()) # MAKE-SET # Sort edges & weights in ascending order edges_weights = nx . get_edge_attributes ( G , 'weight' ) # return as Dict[tuple, int] sorted_edges_weights = sorted ( edges_weights . items (), key = lambda x : x [ 1 ], reverse = False ) # Union-Find Algorithm for ( u , v ), w in sorted_edges_weights : if disjoint_set . find ( u ) != disjoint_set . find ( v ): F = F . union ({( u , v , w )}) . union ({( v , u , w )}) disjoint_set . union ( u , v ) # +) Spanning Tree \uc815\uc758\uc0c1 \ucd5c\ub300 N-1\uac1c\uc758 edge\uac00 \uc788\uc73c\ubbc0\ub85c # \ud574\ub2f9 \uc870\uac74\uc5d0 \ub9de\ucdb0 break \uac78 \uc218\ub3c4 \uc788\ub2e4. return F , disjoint_set \uad6c\ud604\ud55c \ucf54\ub4dc\uc758 \uacb0\uacfc\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd5c\uc18c \ube44\uc6a9\uc73c\ub85c \uc5f0\uacb0\ud558\ub294 edge\ub4e4\uc744 \ucc3e\uc544\ub0b8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 Union-Find \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac01 \uc2a4\ud15d \ubcc4\ub85c \ucd5c\uc18c \ube44\uc6a9\uc744 \ub2f4\ub294 edge\ub4e4\uc758 \uc9d1\ud569 F \uac00 \uc5b4\ub5bb\uac8c \uacb0\ud569\uc774 \ub418\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 Union-Find \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac01 \uc2a4\ud15d \ubcc4\ub85c disjoint set \uac00 \uc5b4\ub5bb\uac8c \uacb0\ud569\uc774 \ub418\uc5ec \uc0ac\uc774\ud074\uc758 \ud615\uc131 \uc5ec\ubd80\ub97c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.","title":"Kruskal"},{"location":"til/2022/08-29-steiner_tree/#prim","text":"\uc2dc\uc791 vertex\uc744 \uc120\ud0dd\ud55c \ud6c4\uc5d0 \uc778\uc811\ud55c edges\uc911 \ucd5c\uc18c \ube44\uc6a9\uc744 \uac00\uc9c0\ub294 edge\ub97c \uc5f0\uacb0\ub41c vertex\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc120\ud0dd\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. Wikipedia - Steiner tree problem \u21a9 Minimum spanning tree \u21a9 Kruskal's algorithm \u21a9 Prim's algorithm \u21a9 \uc288\ud0c0\uc774\ub108 \ud2b8\ub9ac 2-\uadfc\uc0ac \uc54c\uace0\ub9ac\uc998 \u21a9","title":"Prim"},{"location":"","text":"Space for Tutorials and Recording \ud83d\ude43 \uacf5\ubd80\ud560\uac8c \ub108\ubb34 \ub9ce\ub2e4. TAGS \u00b6 TIL \u00b6 08.28 Disjoint Set and Union-find 08.29 Steiner Tree Problem \uc218\ud559\uc801 \ucd5c\uc801\ud654 \u00b6 Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38 Chapter - 2 \uc120\ud615 \uacc4\ud68d","title":"Welcome"},{"location":"#tags","text":"","title":"TAGS"},{"location":"#til","text":"08.28 Disjoint Set and Union-find 08.29 Steiner Tree Problem","title":"TIL"},{"location":"#_1","text":"Chapter - 1 \uc218\ud559\uc801 \ucd5c\uc801\ud654 \uc785\ubb38 Chapter - 2 \uc120\ud615 \uacc4\ud68d","title":"\uc218\ud559\uc801 \ucd5c\uc801\ud654"}]}